// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bavard

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

type Bavard struct {
	verbose     bool
	fmt         bool
	imports     bool
	packageName string
	packageDoc  string
	license     string
	generated   string
}

func Generate(output string, templates []string, data interface{}, options ...func(*Bavard) error) error {
	var bavard Bavard

	// default settings
	bavard.imports = true
	bavard.fmt = true
	bavard.verbose = true
	bavard.generated = "bavard"

	// handle options
	for _, option := range options {
		if err := option(&bavard); err != nil {
			return err
		}
	}

	// create output file
	file, err := os.Create(output)
	if err != nil {
		return err
	}
	if bavard.verbose {
		fmt.Printf("generating %-70s\n", output)
	}

	if bavard.license != "" {
		if _, err := file.WriteString(bavard.license + "\n"); err != nil {
			return err
		}
	}
	if _, err := file.WriteString(fmt.Sprintf("// Code generated by %s DO NOT EDIT\n\n", bavard.generated)); err != nil {
		return err
	}

	if bavard.packageName != "" {
		if bavard.packageDoc != "" {
			if _, err := file.WriteString("// Package " + bavard.packageName + " "); err != nil {
				return err
			}
			if _, err := file.WriteString(bavard.packageDoc + "\n"); err != nil {
				return err
			}
		}
		if _, err := file.WriteString("package " + bavard.packageName + "\n\n"); err != nil {
			return err
		}
	}

	// parse templates
	tmpl := template.Must(template.New("").
		Funcs(helpers()).
		Parse(aggregate(templates)))

	// execute template
	if err = tmpl.Execute(file, data); err != nil {
		file.Close()
		return err
	}
	file.Close()

	// format generated code
	if bavard.fmt {
		if err := exec.Command("gofmt", "-s", "-w", output).Run(); err != nil {
			return err
		}
	}

	// run goimports on generated code
	if bavard.imports {
		if err := exec.Command("goimports", "-w", output).Run(); err != nil {
			return err
		}
	}
	return nil
}

func aggregate(values []string) string {
	var sb strings.Builder
	for _, v := range values {
		sb.WriteString(v)
	}
	return sb.String()
}

// TODO add opt to add FuncMap

func Apache2(copyrightHolder string, year int) func(*Bavard) error {
	return func(bavard *Bavard) error {
		apache2 := `
// Copyright %d %s
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
`
		bavard.license = fmt.Sprintf(apache2, year, copyrightHolder)
		return nil
	}
}

func GeneratedBy(label string) func(*Bavard) error {
	return func(bavard *Bavard) error {
		bavard.generated = label
		return nil
	}
}

func Package(name string, doc ...string) func(*Bavard) error {
	return func(bavard *Bavard) error {
		bavard.packageName = name
		if len(doc) > 0 {
			bavard.packageDoc = doc[0]
		}
		return nil
	}
}

func Verbose(v bool) func(*Bavard) error {
	return func(bavard *Bavard) error {
		bavard.verbose = v
		return nil
	}
}

func Format(v bool) func(*Bavard) error {
	return func(bavard *Bavard) error {
		bavard.fmt = v
		return nil
	}
}

func Import(v bool) func(*Bavard) error {
	return func(bavard *Bavard) error {
		bavard.imports = v
		return nil
	}
}
